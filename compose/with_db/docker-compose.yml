services:
  cloud-api:
    build:
      context: ../../.
      dockerfile: ./compose/with_db/Dockerfile
      target: server
    volumes:
      - ../../:/app
    container_name: cloud_app
    env_file:
      - ../../.env
    ports:
      - 9000:9000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
  
  cloud-locust:
    build:
      context: ../../.
      dockerfile: ./compose/with_db/Dockerfile
      target: locust
    volumes:
      - ../../:/app
    container_name: cloud_locust
    env_file:
      - ../../.env
    ports:
      - 10000:10000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  cloud-api-migrate:
    build:
      context: ../../.
      dockerfile: ./compose/with_db/Dockerfile
      target: migrate
    volumes:
      - ../../:/app
    container_name: cloud_app_migrate
    env_file:
      - ../../.env
    depends_on:
      postgres:
        condition: service_healthy

  cloud-worker:
    build:
      context: ../../.
      dockerfile: ./compose/with_db/Dockerfile
      target: celery
    volumes:
      - ../../:/app
    container_name: cloud_worker
    env_file:
      - ../../.env
    restart: always
    depends_on:
      - postgres
      - redis

  postgres:
    image: postgres:14-alpine
    container_name: cloud_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: "cloud_db"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 5s
      timeout: 5s
      retries: 20

  redis:
    image: redis:alpine
    container_name: cloud_redis

  adminer:
    image: adminer:4.7
    container_name: cloud_adminer
    ports:
      - "9001:8080"
    environment:
      ADMINER_DEFAULT_SERVER: ${ADMINER_DEFAULT_SERVER:-postgresql}
      ADMINER_DEFAULT_DB_DRIVER: ${ADMINER_DEFAULT_DB_DRIVER:-pgsql}
    depends_on:
      postgres:
        condition: service_healthy
